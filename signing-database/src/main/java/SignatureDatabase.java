import com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type;
import org.apache.catalina.Server;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class SignatureDatabase {
    private final String JDBC_DRIVER = "org.h2.Driver";
    //private final String DB_URL = "jdbc:h2:file:C:/Users/camp-eul/Documents/GitHub/dc16-signing/signing-database/src/main/resources/signature";
    private final String DB_URL = "jdbc:h2:file:signing-database/src/main/resources/signature";

    private final String USER = "SA";
    private final String PASS = "";

    private static Logger logger = LoggerFactory.getLogger(SignatureDatabase.class);
    Server server;
    Connection connection;
    Statement statement;
    ResultSet resultSet;
    ResultSetMetaData metaData;

    /**
     * Connects the database.
     */
    public SignatureDatabase(){
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
            statement = connection.createStatement();

        } catch (SQLException | ClassNotFoundException e){
            System.err.println("Exception caught in SignatureDatabas.SignatureDatabase(): " + e);
            e.printStackTrace();
        }
    }

    /**
     * Creating databasefile with empty table SIGNATURE: [id, status, signer, sender, document]
     * id = autogenerated id for each signatuire job
     * status = the signingstatus of each document. Signed / Not Signed
     * signer = the pid of the person that is supposed to signe document TODO: add functinality for multiple signers
     * sender = the org.number of the person/organisation who is sending the document to signing
     * document = the document, actual file or path/id??
     */
    public void createTable(){
        try {
            statement.execute("DROP TABLE IF EXISTS SIGNATURE ");
            statement.execute("CREATE TABLE SIGNATURE " +
                    "(id int AUTO_INCREMENT PRIMARY KEY," +
                    "status VARCHAR(30)," +
                    "signer VARCHAR(30), " +
                    "sender VARCHAR(30)," +
                    "document VARCHAR(30));" );
                   // "PRIMARY KEY (`id`));" );
        } catch (SQLException e) {
            System.err.println("SQLException caught in SignatureDatabase.createTable()" + e);
            e.printStackTrace();
        } System.out.println("DB: Table created");
    }

    /**
     * This method inserts a signature job into the database.
     * @param status the signingstatus of each document. Signed / Not Signed
     * @param signer the pid of the person that is supposed to signe document
     * @param sender the org.number of the person/organisation who is sending the document to signing
     * @param document the document, actual file or path/id??
     */
    public void insertSignature(String status, String signer, String sender, String document){
        String query = String.format("INSERT INTO SIGNATURE (status, signer, sender, document) " +
                "VALUES ('%s','%s','%s','%s');", status, signer, sender, document);

        try {
            statement.executeUpdate(query);
            System.out.println("DB: Signature inserted into the database ");
        } catch (SQLException e){
            System.err.println("SQLException caught in SignatureDatabase.insertSignature(): " + e);
            e.printStackTrace();
        }   System.out.println("DB: Insert signature query: " + query);
    }

    /**
     * This method prints the table in the database.
     * @throws SQLException
     */
    public void printDB() throws SQLException {
        String query = "SELECT * FROM SIGNATURE";
        resultSet= statement.executeQuery(query);
        metaData = resultSet.getMetaData();
        int columnsNumber = metaData.getColumnCount();
        System.out.println("\n -----SIGNATURE DATABASE:---- \n");

        while (resultSet.next()) {
            for(int i = 1 ; i <= columnsNumber; i++){
                System.out.print(resultSet.getString(i) + " ");
            }
            System.out.println();
        }
        System.out.println("\n --------------------------------- \n");
    }

    /**
     *This method gets a signature job, using the sender as a key.
     * @param sender the id of the sender, needed to get the whole signature job from table
     * @return String signaturejob  with the whole signature job
     */
    public String getSignatureJob(String sender) {
        String query = String.format("SELECT (id, status, signer, sender, document)" +
                        "FROM SIGNATURE " +
                        "WHERE sender LIKE '%s';", sender);

        String signaturejob = "";
        System.out.println("DB: Select query: " + query);
        try {
            resultSet = statement.executeQuery(query);
            metaData = resultSet.getMetaData();

            while(resultSet.next())
                signaturejob = resultSet.getString(1);
            return signaturejob;

        } catch (SQLException e) {
            System.err.println("SQLException caught in SignatureDatabase.getSignatureJob()" + e);
            e.printStackTrace();
        }
        return null;
        }

    /**
     * This method retrives signer id using sender as key.
     * @param sender
     * @return signer
     **/
    public String getSigner(String sender){
        String query = String.format("SELECT (signer)" +
                "FROM SIGNATURE " +
                "WHERE sender LIKE '%s';", sender);

        String signer = "";
        System.out.println("DB: Select query: " + query);
        try {
            resultSet = statement.executeQuery(query);
            metaData = resultSet.getMetaData();

            while(resultSet.next())
                signer = resultSet.getString(1);
            return signer;

        } catch (SQLException e) {
            System.err.println("SQLException caught in SignatureDatabase.getSigner()" + e);
            e.printStackTrace();
        }
        return null;
    }

    public void updateValue(String sender, String column, String value){
        String update = String.format("UPDATE SIGNATURE " +
                "SET %s = '%s' " +
                "WHERE sender = '%s' ;", column, value, sender);
        System.out.println("DB: Update query: Signaturejob with sender = " + sender + " has updated '" + column + "' to " + value);
        try {
            statement.executeUpdate(update);
            //metaData = resultSet.getMetaData();
        }catch (SQLException e) {
            System.err.println("SQLException caught in SignatureDatabase.updateValue()" + e);
        }

    }



    }
